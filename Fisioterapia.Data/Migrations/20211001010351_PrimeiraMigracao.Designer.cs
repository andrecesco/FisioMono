// <auto-generated />
using System;
using Fisioterapia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fisioterapia.Data.Migrations
{
    [DbContext(typeof(FisioterapiaDbContext))]
    [Migration("20211001010351_PrimeiraMigracao")]
    partial class PrimeiraMigracao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fisioterapia.Domain.Models.Anamnese", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlgiaPalpacao")
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("ConsumeSubstancias")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContraturaMuscular")
                        .HasColumnType("bit");

                    b.Property<string>("ContraturaMuscularObservacao")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDelecao")
                        .HasColumnType("datetime");

                    b.Property<string>("ExameFisioPostural")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HPM")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HipotrofiaMuscular")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Investigacao")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicamentoParaPressao")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NomeAtividadeFisica")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("PraticaAtividadeFisica")
                        .HasColumnType("bit");

                    b.Property<bool?>("PressaoAlta")
                        .HasColumnType("bit");

                    b.Property<string>("QP")
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("RetracaoMuscular")
                        .HasColumnType("bit");

                    b.Property<string>("RetracaoMuscularObservacao")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TonusMuscular")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId")
                        .IsUnique();

                    b.ToTable("Anamneses");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Conduta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDelecao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Condutas");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.CondutaTratamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CondutaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDelecao")
                        .HasColumnType("datetime");

                    b.Property<Guid>("TratamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CondutaId");

                    b.HasIndex("TratamentoId");

                    b.ToTable("CondutaTratamentos");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Convenio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDelecao")
                        .HasColumnType("datetime");

                    b.Property<string>("Matricula")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Convenios");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDelecao")
                        .HasColumnType("datetime");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDelecao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Profissao")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Tratamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CondutaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDelecao")
                        .HasColumnType("datetime");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CondutaId");

                    b.ToTable("Tratamentos");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Anamnese", b =>
                {
                    b.HasOne("Fisioterapia.Domain.Models.Paciente", "Paciente")
                        .WithOne("Anamnese")
                        .HasForeignKey("Fisioterapia.Domain.Models.Anamnese", "PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Conduta", b =>
                {
                    b.HasOne("Fisioterapia.Domain.Models.Paciente", "Paciente")
                        .WithMany("Condutas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.CondutaTratamento", b =>
                {
                    b.HasOne("Fisioterapia.Domain.Models.Conduta", "Conduta")
                        .WithMany("CondutaTratamentos")
                        .HasForeignKey("CondutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fisioterapia.Domain.Models.Tratamento", "Tratamento")
                        .WithMany("CondutaTratamentos")
                        .HasForeignKey("TratamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conduta");

                    b.Navigation("Tratamento");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Convenio", b =>
                {
                    b.HasOne("Fisioterapia.Domain.Models.Paciente", "Paciente")
                        .WithMany("Convenios")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Endereco", b =>
                {
                    b.HasOne("Fisioterapia.Domain.Models.Paciente", "Paciente")
                        .WithMany("Enderecos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Tratamento", b =>
                {
                    b.HasOne("Fisioterapia.Domain.Models.Conduta", null)
                        .WithMany("Tratamentos")
                        .HasForeignKey("CondutaId");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Conduta", b =>
                {
                    b.Navigation("CondutaTratamentos");

                    b.Navigation("Tratamentos");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Paciente", b =>
                {
                    b.Navigation("Anamnese");

                    b.Navigation("Condutas");

                    b.Navigation("Convenios");

                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Fisioterapia.Domain.Models.Tratamento", b =>
                {
                    b.Navigation("CondutaTratamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
